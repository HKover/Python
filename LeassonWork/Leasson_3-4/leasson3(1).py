a = 10
b = 30
d = 100 
g = "String"

if type(a) == int:# Проверка, не является ли a целым числом цикл будет запущен при условии что одно из условий тру! 
    print("A == int ")

elif b != 0 :
    print("B != 0 Nice !")

elif d <= 1000:
    print("D <= 1000")

else:
    print("Script dont work (( ")


# ===============================================
























































# В Python есть несколько типов управляющих конструкций, которые позволяют изменять поток выполнения программы в зависимости от условий. Вот основные из них:

# ### 1. **Условные операторы (if, elif, else)**

# Они используются для выполнения кода, если выполняется определённое условие.

# ```python
# x = 10

# if x > 5:
#     print("x больше 5")
# elif x == 5:
#     print("x равен 5")
# else:
#     print("x меньше 5")
# ```

# - **if** — выполняет блок кода, если условие истинно.
# - **elif** — выполняется, если все предыдущие условия ложны, но это условие истинно.
# - **else** — выполняется, если все предыдущие условия ложны.

# ### 2. **Циклы (for, while)**

# Циклы используются для повторения блоков кода.

# #### Цикл `for`

# Этот цикл обычно используется для перебора элементов в последовательности (списке, строке, диапазоне и т.д.).

# ```python
# for i in range(5):
#     print(i)
# ```

# - **range(5)** — создаёт последовательность от 0 до 4.

# #### Цикл `while`

# Цикл `while` выполняется, пока условие истинно.

# ```python
# x = 0
# while x < 5:
#     print(x)
#     x += 1
# ```

# ### 3. **Конструкции управления циклом (break, continue, pass)**

# #### `break`

# Используется для немедленного выхода из цикла.

# ```python
# for i in range(10):
#     if i == 5:
#         break
#     print(i)
# ```

# #### `continue`

# Пропускает текущую итерацию и продолжает выполнение следующей.

# ```python
# for i in range(5):
#     if i == 3:
#         continue
#     print(i)
# ```

# #### `pass`

# `pass` — это пустая инструкция, которая не делает ничего. Используется как заглушка, например, при создании пустых функций или классов.

# ```python
# if condition:
#     pass  # Здесь будет код, когда условие истинно
# ```

# ### 4. **Оператор `try-except` для обработки исключений**

# Этот оператор позволяет обрабатывать ошибки, не прерывая выполнение программы.

# ```python
# try:
#     x = 10 / 0
# except ZeroDivisionError:
#     print("Ошибка деления на ноль")
# ```

# - **try** — блок кода, в котором может возникнуть ошибка.
# - **except** — блок кода, который выполняется при возникновении ошибки.
# - **else** — выполняется, если ошибок не возникло.
# - **finally** — выполняется в любом случае, после того как завершится выполнение блока `try` или `except`.

# ```python
# try:
#     x = 10 / 2
# except ZeroDivisionError:
#     print("Ошибка деления на ноль")
# else:
#     print("Нет ошибок!")
# finally:
#     print("Этот блок выполнится в любом случае")
# ```

# ### 5. **Оператор `assert`**

# Этот оператор используется для проверки истинности выражения. Если выражение ложно, возникает исключение `AssertionError`.

# ```python
# assert 1 + 1 == 2  # Ничего не произойдёт
# assert 1 + 1 == 3  # Произойдёт ошибка
# ```

# ### 6. **Тернарный оператор**

# Тернарный оператор позволяет писать условие в одной строке.

# ```python
# x = 5
# result = "x больше 3" if x > 3 else "x меньше или равно 3"
# print(result)
# ```

# ---

# В Python эти управляющие конструкции позволяют создавать гибкие и эффективные алгоритмы. Если нужно, могу показать пример с использованием нескольких из них.